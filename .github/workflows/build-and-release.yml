name: Build and Release APK/IPA

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    
    steps:
    - name: üèó Setup repo
      uses: actions/checkout@v4

    - name: üèó Setup Node
      uses: actions/setup-node@v4
      with:
        node-version: 18.x
        cache: npm
        cache-dependency-path: friend-lite/package-lock.json

    - name: ‚úÖ Check EXPO_TOKEN
      run: |
        if [ -z "${{ secrets.EXPO_TOKEN }}" ]; then
          echo "‚ùå ERROR: EXPO_TOKEN secret is not set!"
          echo ""
          echo "üîß To fix this:"
          echo "1. Go to https://expo.dev and create a free account"
          echo "2. Generate an access token at: https://expo.dev/accounts/[username]/settings/access-tokens"
          echo "3. Add it as a GitHub secret named 'EXPO_TOKEN'"
          echo "4. Go to: Settings ‚Üí Secrets and variables ‚Üí Actions ‚Üí New repository secret"
          echo ""
          echo "üìñ See setup guide for detailed instructions."
          exit 1
        else
          echo "‚úÖ EXPO_TOKEN is configured"
        fi

    - name: üèó Setup EAS
      uses: expo/expo-github-action@v8
      with:
        eas-version: latest
        token: ${{ secrets.EXPO_TOKEN }}

    - name: üì¶ Install dependencies
      working-directory: ./friend-lite
      run: npm ci

    - name: üöÄ Build Android APK (Development)
      working-directory: ./friend-lite
      run: |
        echo "Starting Android build..."
        BUILD_OUTPUT=$(eas build --platform android --profile development --non-interactive --json 2>&1)
        if [ $? -eq 0 ]; then
          BUILD_ID=$(echo "$BUILD_OUTPUT" | jq -r '.[] | select(.platform=="ANDROID") | .id // empty')
          if [ ! -z "$BUILD_ID" ]; then
            echo "ANDROID_BUILD_ID=$BUILD_ID" >> $GITHUB_ENV
            echo "‚úÖ Android build started: $BUILD_ID"
          else
            echo "‚ùå Could not extract Android build ID"
            exit 1
          fi
        else
          echo "‚ùå Android build failed:"
          echo "$BUILD_OUTPUT"
          exit 1
        fi

    - name: üöÄ Build iOS IPA (Development) 
      working-directory: ./friend-lite
      run: |
        echo "Starting iOS build..."
        BUILD_OUTPUT=$(eas build --platform ios --profile development --non-interactive --json 2>&1)
        if [ $? -eq 0 ]; then
          BUILD_ID=$(echo "$BUILD_OUTPUT" | jq -r '.[] | select(.platform=="IOS") | .id // empty')
          if [ ! -z "$BUILD_ID" ]; then
            echo "IOS_BUILD_ID=$BUILD_ID" >> $GITHUB_ENV
            echo "‚úÖ iOS build started: $BUILD_ID"
          else
            echo "‚ùå Could not extract iOS build ID"
            exit 1
          fi
        else
          echo "‚ùå iOS build failed:"
          echo "$BUILD_OUTPUT"
          exit 1
        fi

    - name: ‚è≥ Wait for builds to complete
      working-directory: ./friend-lite
      run: |
        echo "Waiting for Android build..."
        eas build:view $ANDROID_BUILD_ID --json | jq -r '.status'
        while [ "$(eas build:view $ANDROID_BUILD_ID --json | jq -r '.status')" = "IN_PROGRESS" ] || [ "$(eas build:view $ANDROID_BUILD_ID --json | jq -r '.status')" = "IN_QUEUE" ]; do
          echo "Android build still in progress..."
          sleep 30
        done
        
        echo "Waiting for iOS build..."
        while [ "$(eas build:view $IOS_BUILD_ID --json | jq -r '.status')" = "IN_PROGRESS" ] || [ "$(eas build:view $IOS_BUILD_ID --json | jq -r '.status')" = "IN_QUEUE" ]; do
          echo "iOS build still in progress..."
          sleep 30
        done

    - name: üì± Download builds
      working-directory: ./friend-lite
      run: |
        mkdir -p build
        
        # Download Android APK
        ANDROID_URL=$(eas build:view $ANDROID_BUILD_ID --json | jq -r '.artifacts.buildUrl // empty')
        if [ ! -z "$ANDROID_URL" ]; then
          curl -L -o build/app-dev.apk "$ANDROID_URL"
          echo "Downloaded Android APK"
        fi
        
        # Download iOS IPA  
        IOS_URL=$(eas build:view $IOS_BUILD_ID --json | jq -r '.artifacts.buildUrl // empty')
        if [ ! -z "$IOS_URL" ]; then
          curl -L -o build/app-dev.ipa "$IOS_URL"
          echo "Downloaded iOS IPA"
        fi

    - name: üì± Create Release
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: build-${{ github.run_number }}
        name: "Build #${{ github.run_number }}"
        body: |
          üöÄ Automated build from commit ${{ github.sha }}
          
          üì± **Downloads:**
          - **Android APK**: `app-dev.apk` - Install directly on Android devices
          - **iOS IPA**: `app-dev.ipa` - For development/testing (requires developer account to install)
          
          üí° These are development builds - no signing required!
        files: |
          friend-lite/build/app-dev.apk
          friend-lite/build/app-dev.ipa
        draft: false
        prerelease: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 